name: Deploy Backend (SAM)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: deploy-backend-sam-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write     # OIDC 필수
      contents: read
    steps:
      - uses: actions/checkout@v4

      # (선택) jq 설치 - OIDC 토큰 디코드 시 사용
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 1) 현재 실행 컨텍스트 출력
      - name: Print GitHub context
        run: |
          echo "EVENT=$GITHUB_EVENT_NAME"
          echo "REF=$GITHUB_REF"
          echo "HEAD_REF=$GITHUB_HEAD_REF"

      # 2) OIDC 토큰 발급 + 클레임 확인 (payload만 디코드)
      - name: Get OIDC token
        id: idtoken
        uses: actions/github-script@v7
        with:
          script: |
            const core = require('@actions/core');
            const id = await core.getIDToken('sts.amazonaws.com'); // audience
            core.setOutput('token', id)

      - name: Decode OIDC claims
        run: |
          TOKEN="${{ steps.idtoken.outputs.token }}"
          echo "$TOKEN" | cut -d '.' -f2 | base64 -d 2>/dev/null | jq .
          # 여기서 "sub", "iss", "aud" 값을 확인하고 IAM Trust policy와 일치시키세요.

      # 3) AWS 자격증명(OIDC) 구성
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5.1.0
        with:
          aws-region: ap-northeast-2
          role-to-assume: arn:aws:iam::338183196042:role/GitHubActionsDeployRole
          role-session-name: github-sam-deploy
          # (선택) 기존 환경변수 자격증명 무시하고 OIDC만 쓰고 싶으면:
          # unset-current-credentials: true

      # 4) OIDC 성공 확정 체크
      - name: Who am I?
        run: aws sts get-caller-identity

      # ---- 빌드/배포 ----
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            **/requirements.txt

      - name: Install SAM CLI
        run: pip install "aws-sam-cli==1.123.0"

      - name: Cache SAM build
        uses: actions/cache@v4
        with:
          path: |
            ~/.aws-sam
            .aws-sam
          key: sam-build-${{ runner.os }}-${{ hashFiles('**/template*.y*ml', '**/requirements.txt', '**/package.json', '**/poetry.lock') }}

      - name: Cache Lambda layer (python deps)
        uses: actions/cache@v4
        with:
          path: layers/python
          key: layer-python-${{ runner.os }}-${{ hashFiles('layers/requirements.txt') }}

      - name: SAM build (no container, cached+parallel)
        run: sam build --cached --parallel

      - name: SAM deploy
        run: |
          sam deploy \
            --stack-name blog-backend \
            --resolve-s3 \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              FrontOrigin='${{ vars.FRONT_ORIGIN }}' \
              SecretsArn='${{ secrets.SECRETS_ARN }}' \
              SubnetIds='${{ vars.SUBNET_IDS }}' \
              SecurityGroupIds='${{ vars.SECURITY_GROUP_IDS }}' \
              LogRetentionInDays='${{ vars.LOG_RETENTION_DAYS || 14 }}'
